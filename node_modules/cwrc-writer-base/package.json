{
  "_args": [
    [
      {
        "raw": "cwrc-writer-base@github:cwrc/CWRC-WriterBase",
        "scope": null,
        "escapedName": "cwrc-writer-base",
        "name": "cwrc-writer-base",
        "rawSpec": "github:cwrc/CWRC-WriterBase",
        "spec": "github:cwrc/CWRC-WriterBase",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:cwrc/CWRC-WriterBase.git",
          "sshUrl": "git+ssh://git@github.com/cwrc/CWRC-WriterBase.git",
          "httpsUrl": "git+https://github.com/cwrc/CWRC-WriterBase.git",
          "gitUrl": "git://github.com/cwrc/CWRC-WriterBase.git",
          "shortcut": "github:cwrc/CWRC-WriterBase",
          "directUrl": "https://raw.githubusercontent.com/cwrc/CWRC-WriterBase/master/package.json"
        }
      },
      "C:\\wamp\\www\\cwrc-main-site-repo\\sites\\default\\modules\\islandora_cwrc_writer"
    ]
  ],
  "_from": "cwrc/CWRC-WriterBase",
  "_id": "cwrc-writer-base@0.0.0-development",
  "_inCache": true,
  "_location": "/cwrc-writer-base",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cwrc-writer-base@github:cwrc/CWRC-WriterBase",
    "scope": null,
    "escapedName": "cwrc-writer-base",
    "name": "cwrc-writer-base",
    "rawSpec": "github:cwrc/CWRC-WriterBase",
    "spec": "github:cwrc/CWRC-WriterBase",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:cwrc/CWRC-WriterBase.git",
      "sshUrl": "git+ssh://git@github.com/cwrc/CWRC-WriterBase.git",
      "httpsUrl": "git+https://github.com/cwrc/CWRC-WriterBase.git",
      "gitUrl": "git://github.com/cwrc/CWRC-WriterBase.git",
      "shortcut": "github:cwrc/CWRC-WriterBase",
      "directUrl": "https://raw.githubusercontent.com/cwrc/CWRC-WriterBase/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/cwrc/CWRC-WriterBase.git#4ac343b76b52748459c39430e0609f00c086a6aa",
  "_shasum": "8d6313cceedcae7ea3182bad51238cf049aa33e6",
  "_shrinkwrap": null,
  "_spec": "cwrc-writer-base@github:cwrc/CWRC-WriterBase",
  "_where": "C:\\wamp\\www\\cwrc-main-site-repo\\sites\\default\\modules\\islandora_cwrc_writer",
  "author": {
    "name": "Andrew MacDonald"
  },
  "browser": {
    "objtree": "./src/js/lib/objtree/ObjTree.js"
  },
  "browserify": {
    "transform": [
      [
        "babelify",
        {
          "presets": [
            "es2015"
          ],
          "env": {
            "test": {
              "plugins": [
                "istanbul"
              ]
            }
          }
        }
      ]
    ]
  },
  "bugs": {
    "url": "https://github.com/cwrc/CWRC-WriterBase/issues"
  },
  "config": {
    "commitizen": {
      "path": "node_modules/cz-conventional-changelog"
    }
  },
  "contributors": "James Chartrand",
  "dependencies": {
    "bootstrap": "3.3.7",
    "css-parse": "^2.0.0",
    "css-stringify": "^2.0.0",
    "cwrc-git-dialogs": "^1.1.0",
    "cwrc-public-entity-dialogs": "^1.2.0",
    "dbpedia-entity-lookup": "0.0.0",
    "getty-entity-lookup": "^1.2.0",
    "jquery": "3.1.0",
    "jquery-ui": "1.12",
    "js-cookie": "2.1.3",
    "jstree": "3.3.3",
    "layout": "github:ajmacdonald/layout",
    "log4javascript": "^1.4.15",
    "moment": "^2.13.0",
    "octokit": "0.10.4",
    "openseadragon": "2.3.1",
    "prismjs": "1.6.0",
    "tinymce": "4.7.2",
    "viaf-entity-lookup": "^1.1.1",
    "wikidata-entity-lookup": "^1.1.0"
  },
  "description": "intuitive document editing with xml and rdf",
  "devDependencies": {
    "babel-plugin-istanbul": "4.1.5",
    "babel-preset-es2015": "6.24.1",
    "babelify": "7.3.0",
    "browser-run": "4.0.2",
    "browserify": "14.3.0",
    "codecov.io": "0.1.6",
    "commitizen": "2.9.6",
    "concat-stream": "1.6.0",
    "copyfiles": "^1.2.0",
    "cross-env": "5.0.5",
    "cz-conventional-changelog": "2.0.0",
    "deamdify": "github:au-phiware/deamdify",
    "faucet": "0.0.1",
    "husky": "0.13.3",
    "istanbul": "0.4.5",
    "mkdirp": "0.5.1",
    "rimraf": "^2.6.2",
    "semantic-release": "^8.2.0",
    "sinon": "4.0.1",
    "tape": "4.6.3",
    "tape-promise": "2.0.1",
    "watch": "1.0.2",
    "watchify": "3.9.0"
  },
  "files": [
    "src"
  ],
  "gitHead": "4ac343b76b52748459c39430e0609f00c086a6aa",
  "homepage": "https://github.com/cwrc/CWRC-WriterBase#readme",
  "keywords": [
    "xml",
    "rdf",
    "editor",
    "annotation"
  ],
  "license": "GPL-2.0",
  "main": "src/js/writer.js",
  "name": "cwrc-writer-base",
  "optionalDependencies": {},
  "readme": "![Picture](http://cwrc.ca/logos/CWRC_logos_2016_versions/CWRCLogo-Horz-FullColour.png)\n\n[![Travis](https://img.shields.io/travis/cwrc/CWRC-WriterBase.svg)](https://travis-ci.org/cwrc/CWRC-WriterBase)\n[![Codecov](https://img.shields.io/codecov/c/github/cwrc/CWRC-WriterBase.svg)](https://codecov.io/gh/cwrc/CWRC-WriterBase)\n[![version](https://img.shields.io/npm/v/cwrc-writer-base.svg)](http://npm.im/cwrc-writer-base)\n[![downloads](https://img.shields.io/npm/dm/cwrc-writer-base.svg)](http://npm-stat.com/charts.html?package=cwrc-writer-base&from=2015-08-01)\n[![GPL-2.0](https://img.shields.io/npm/l/cwrc-writer-base.svg)](http://opensource.org/licenses/GPL-2.0)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![experimental](http://badges.github.io/stability-badges/dist/experimental.svg)](http://github.com/badges/stability-badges)\n\nCWRC-Writer-Base\n================\n\nThe [Canadian Writing Research Collaboratory (CWRC)](http://www.cwrc.ca/projects/infrastructure-projects/technical-projects/cwrc-writer/) is developing an in-browser text markup editor (CWRC-Writer) for use by collaborative scholarly editing projects.  This package is the base code that builds on the TinyMCE javascript editor, and is meant to be packaged together (using Browserify) with two other packages that communicate with a server that provides document storage and entity (people, places) lookup.  A default version of the CWRC-Writer that uses GitHub for storage and VIAF for entity lookup is available for anyone's use:  \n\n[http://208.75.74.217](http://208.75.74.217)  \n\n## Table of Contents\n\n1. [Overview](#overview)\n1. [Storage and entity lookup](#storage-and-entity-lookup)\n1. [Layout](#layout)\n1. [Configuration](#overview)\n1. [API](#api)\n1. [Managers](#managers)\n1. [Modules](#modules)\n1. [Demo](#demo)\n1. [Development](#development)\n\n## Overview\n\nCWRCWriter is a WYSIWYG text editor for in-browser XML editing and stand-off RDF annotation.  The editor is a customization of the [TinyMCE](http://www.tinymce.com) editor.\n\nA 'CWRCWriter' installation is a bundling of the main CWRC-WriterBase (the code in this repository) with two other NPM packages that handle interaction (dialogs for user input, and calls to the server) with server-side services for:\n\n* document storage\n* named entity lookup (and optionally /add/edit)\n\nThe default implementation of the CWRC-Writer is the [CWRC-GitWriter](https://github.com/cwrc/cwrc-gitwriter) which uses GitHub to store documents, and uses [VIAF](https://viaf.org) for named entity (people, places) lookup.  The dialogs to interact with GitHub and VIAF are in the NPM packages [cwrc-git-dialogs](https://github.com/cwrc/cwrc-git-dialogs) and [cwrc-public-entity-dialogs](https://github.com/cwrc/cwrc-public-entity-dialogs). The CWRC-GitWriter therefore bundles (using browserify) those two NPM packages with the CWRC-WriterBase package. You may substitute your own packages with dialogs that interact with your own backend storage and/or entity lookup.\n\nThe CWRCWriterBase itself also provides built in interaction with default server-side services for:\n\n* XML Validation\n* XML Schemas\n* documentation and help\n\nCWRC provides a default XML validation HTTP end point that the CWRC-WriterBase is preconfigured to use.  You may substitute your own, but the CWRC-WriterBase expects validation and error messages in a specific format.  Similarly you can substitute your own documentation and help files.\n\n## Storage and entity lookup\n\nIf you choose not to use either the default CWRC GitHub storage or VIAF named entity lookup then most of the work in setting up CWRCWriter for your project will be implementing the dialogs to interact with your backend storage or named entity lookup. We have split these pieces off into their own packages in large part to make it easier to substitue your own dialogs for one or both.  \n\nA good example to follow when creating a new CWRC-Writer project is our default implementation [CWRC-GitWriter](https://github.com/cwrc/CWRC-GitWriter).  You might also choose to use either the CWRC GitHub storage dialogs or the CWRC public entity lookup, both of which are used by the CWRC-GitWriter, and replace just one of the two.  To help understand how we've developed the CWRC-Writer, you could also look at our [development docs](https://github.com/cwrc/CWRC-Writer-Dev-Docs]).\n\nTo replace one or the other, or both, of the storage and entity dialogs, you'll need to create objects with the following APIs:\n\n#### Storage object API\n\nload(writer)\n\nsave(writer)\n\nwhere 'writer' is the writer object (i.e., the object defined in the [API](#writer-object) section.\n\nThe storage object for GitHub is implemented here:  [cwrc-git-dialogs](https://github.com/cwrc/cwrc-git-dialogs)\n\nEach method is invoked by the CWRC-WriterBase whenever the end user clicks the 'save' or 'load' button in the editor.\n\nEach method spawns a diaglog (bootstrap in our case) that prompts the user to load or save.  Because load(writer) and save(writer) are passed an instance of the CWRC writer object, all of the methods defined below in [API](#writer-object) are available, to allow get and set of the XML in the writer.\n\nWe also define an authenticate method on our cwrc-git-dialogs object to handle the Oauth authentication of GitHub.  You may implement your authentication however you like.  If you want to follow our approach you can see it here: [https://github.com/cwrc/CWRC-GitWriter/blob/master/src/js/app.js] where we authenticate before instantiating the CWRC-WriterBase.  \n\n#### Entity Lookup API\n\nDefined and implemented here:  [https://github.com/cwrc/CWRC-PublicEntityDialogs]\n\nThe lookup methods defined in the Entity Lookup API are invoked by the CWRC-WriterBase whenever the end user clicks one of the entity buttons (person, place, event) to 'annotate' or 'tag' an entity reference` (e.g., a person name like 'Charlie Parker') that they've highlighted in the text.\n\n## Layout \n\nThe layout of the CWRC-Writer can be modified from a configuration file.\nSee [https://github.com/cwrc/CWRC-GitWriter/blob/master/src/js/layout-config.js] for an example of initialization and layout. [https://github.com/cwrc/CWRC-GitWriter/blob/master/src/js/app.js] shows how to pass the layout config file into the CWRC-WriterBase.  The following API section talks more about configuration.\n\n## API\n\n### Constructor\n\nThe CWRC-WriterBase exports a single constructor function that takes one argument, a configuration object.\n\nSee [https://github.com/cwrc/CWRC-GitWriter/blob/master/src/js/config.js] for an example of a base configuration file, and  \n[https://github.com/cwrc/CWRC-GitWriter/blob/master/src/js/app.js] to see the configuration file loaded, extended, and passed into the constructor.\n\n### Configuration Object\n\nOptions that can be set on the configuration object:\n\n##### Required Options\n\n* `config.cwrcRootUrl`: String. An absolute URL that should point to the root of the CWRC-Writer directory. <b>Required</b>.\n* `config.storageDialogs`: Object.  Object. Storage dialogs, see [cwrc-gi-dialogs](https://github.com/cwrc/cwrc-git-dialogs) for example and API definition.\n* `config.layout`: Object.  Layout object as described above [Layout](#layout), see [layout-config.js](https://github.com/cwrc/CWRC-GitWriter/blob/master/src/js/layout-config.js) for example.\n* `config.entityLookupDialogs`: Object. Entity lookup, see [cwrc-public-entity-dialogs](https://github.com/cwrc/CWRC-PublicEntityDialogs) for example and API definition.\n\n##### Other Options\n\n* `config.mode`: String. The mode in which to start the CWRC-Writer.  `xml` or `xmlrdf`.\n* `config.allowOverlap`: Boolean. Should overlapping entities be allowed initially?.\n* `config.schemas`: Object. A map of schema objects that can be used in the CWRC-Writer. Each entry should contain the following:\n  * `name`: String. The schema title.\n  * `url`: String. A url that links to the schema (RELAX NG) file.\n  * `cssUrl`: String. A url that links to the CSS associated with this schema.\n  * `schemaMappingsId`: String. The directory name in the schema directory: https://github.com/cwrc/CWRC-Writer/tree/development/src/js/schema from which to load mapping and dialogs files for the schema.\n  * `entityTemplates`: Object. Lists urls for use by citation and note entity dialogs.\n* `config.cwrcDialogs`: Object. Lists urls for use by the [CWRC-Dialogs](https://github.com/cwrc/CWRC-Dialogs). \n* `config.buttons1`, `config.buttons2`, `config.buttons3`: String. A comma separated list of plugins to set in the CWRC-Writer toolbars. Possible values: `addperson, addplace, adddate, addorg, addcitation, addnote, addtitle, addcorrection, addkeyword, addlink, editTag, removeTag, addtriple, viewsource, editsource, validate, savebutton, loadbutton`.\n\n#### Configuration within documents\n\nConfiguration information can be included in the XML documents themselves, to override project settings:\n\n`XML/RDF mode`  \n\nSet the mode with a cw:mode setting in the RDF section:\n\n```\n<rdf:Description rdf:about=\"http://localhost:8080/editor/documents/null\">\n    <cw:mode>0</cw:mode>\n</rdf:Description>\n```\n\nwhere allowable values for `cw:mode` are:\n\n0 = XML & RDF  (default - XML & RDF with no overlap)  \n1 = XML  \n2 = RDF\n\n`Annotation Overlap`\n\nOverlapping annotations, those that cross XML tags, are disallowed by default. Enable them with:\n\n```\n<rdf:Description rdf:about=\"http://localhost:8080/editor/documents/null\">\n    <cw:allowOverlap>true</cw:allowOverlap>\n</rdf:Description>\n```\n\n### Writer object\n\nThe object returned by the constructor is defined here: [writer.js](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/writer.js).  The typical properties and methods you'd want to use when implementing your own storage and/or entity dialogs are:\n\n#### Properties\n\n###### isInitialized\nboolean    \n *Has the editor been initialized.* \n\n###### isReadOnly  \nboolean     \n *Is the editor in readonly mode.*  \n  \n###### isAnnotator\nboolean  \n*Is the editor in annotate (entities) only mode.*\n\n#### Methods\n\n###### loadDocument(xmlDoc)\n*Loads a parsed XML document into the editor*\n\n###### getDocument()\n*Returns the parsed XML document from the editor*\n\n###### getDocRawContent()\n*Returns the raw textual content from the editor, including xml tags*\n\n###### showLoadDialog()\n*Convenience method to call the load() method of the object set in the storageDialogs property of the config object passed to the writer.*\n\n###### validate (callback)\n*Validates the current document*\ncallback(w, valid): function where w is the writer and valid is true/false.\nFires a `documentValidated` event if validation is successful.\n\n## Managers\n\nTasks within CWRC-Writer are handled by specific managers.\n\n### Annotations\n\n[AnnotationsManager](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/annotationsManager.js)\n\nHandles conversion of entities to annotations and vice-versa.\n\n### Dialogs\n\n[DialogManager](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/dialogManager.js)\n\nHandles the initialization and display of dialogs.\n\n### Entities\n\n[EntitiesManager](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/entitiesManager.js)\n\nHandles the creation and modification of [entities](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/entity.js). Stores the list of entities in the current document.\n\n### Events\n\n[EventManager](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/eventManager.js)\n\nHandles the dissemination of events through the CWRC-Writer using a publication-subscribe pattern. See the [code](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/eventManager.js) for the full list of events.\n\n### Schema\n\n[SchemaManager](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/schema/schemaManager.js)\n\nHandles schema loading and schema CSS processing. Stores the list of available schemas, as well as the current schema. Handles the creation of schema-appropriate entities, via the [Mapper](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/schema/mapper.js).\n\n\n## Modules\n\nModules are self-contained components that add extra functionality to CWRC-Writer. These are added to the Base through the [Layout](#layout).\n\n### EntitiesList\n\n[EntitiesList](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/layout/modules/entitiesList.js)\n\nDisplays the list of entities in the current document. Allows for modifying, copying, and deleting of entities.\n\n### ImageViewer\n\n[ImageViewer](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/layout/modules/imageViewer.js)\n\nDisplays images linked from within the current document. Useful for OCR'd documents.\n\n### Relations\n\n[Relations](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/layout/modules/relations.js)\n\nDisplays the list of entity relationships (i.e. RDF triples) in the current document. Uses [triple](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/dialogs/triple.js) to add new relationships.\n\n### Selection\n\n[Selection](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/layout/modules/selection.js)\n\nDisplays the markup of the text that's selected in the current document.\n\n### StructureTree\n\n[StructureTree](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/layout/modules/structureTree.js)\n\nDisplays the markup of the current document in a tree/outline. Useful for navigating and modifying the document.\n\n### Validation\n\n[Validation](https://github.com/cwrc/CWRC-WriterBase/blob/master/src/js/layout/modules/validation.js)\n\nRequests and displays the results of document validation. See [validate](#validate-callback).\n\n## Demo\n\nA running deployment of the [CWRC-GitWriter](https://github.com/cwrc/CWRC-GitWriter), our default implementation, is available for anyone's use at:\n\n[http://208.75.74.217](http://208.75.74.217)  \n\nThis demo may well be all that you need as it allows loading and saving to arbitrary GitHub repositories.\n\n## Development\n\n[CWRC-Writer-Dev-Docs](https://github.com/jchartrand/CWRC-Writer-Dev-Docs) describes general development practices for CWRC-Writer GitHub repositories, including this one.\n\n#### Testing\n\nThe code in this repository is intended to run in the browser, and so we use [browser-run](https://github.com/juliangruber/browser-run) to run [browserified](http://browserify.org) [tape](https://github.com/substack/tape) tests directly in the browser. \n\nWe [decorate](https://en.wikipedia.org/wiki/Decorator_pattern) [tape](https://github.com/substack/tape) with [tape-promise](https://github.com/jprichardson/tape-promise) to allow testing with promises and async methods.  \n\n#### Mocking\n\nWe use [sinon](http://sinonjs.org)\n\n#### Code Coverage  \n\nWe generate code coverage by instrumenting our code with [istanbul](https://github.com/gotwarlost/istanbul) before [browser-run](https://github.com/juliangruber/browser-run) runs the tests, \nthen extract the coverage (which [istanbul](https://github.com/gotwarlost/istanbul) writes to the global object, i.e., the window in the browser), format it with [istanbul](https://github.com/gotwarlost/istanbul), and finally report (Travis actually does this for us) to [codecov.io](codecov.io)\n\n#### Transpilation\n\nWe use [babelify](https://github.com/babel/babelify) and [babel-plugin-istanbul](https://github.com/istanbuljs/babel-plugin-istanbul) to compile our code, tests, and code coverage with [babel](https://github.com/babel/babel)  \n\n#### Continuous Integration\n\nWe use [Travis](https://travis-ci.org).\n\nNote that to allow our tests to run in Electron on Travis, the following has been added to .travis.yml:\n\n```\naddons:\n  apt:\n    packages:\n      - xvfb\ninstall:\n  - export DISPLAY=':99.0'\n  - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\n  - npm install\n```\n\n#### Release\n\nWe follow [SemVer](http://semver.org), which [Semantic Release](https://github.com/semantic-release/semantic-release) makes easy.  \nSemantic Release also writes our commit messages, sets the version number, publishes to NPM, and finally generates a changelog and a release (including a git tag) on GitHub.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cwrc/CWRC-WriterBase.git"
  },
  "scripts": {
    "browserify-test": "mkdirp build && cross-env NODE_ENV=test && browserify -g deamdify test/test.js -o build/test.js --debug",
    "check-coverage": "istanbul check-coverage --statements 5 --branches 5 --functions 5 --lines 5",
    "cm": "git-cz",
    "debug:build": "npm run debug:clean && npm run debug:copyfiles && npm run debug:build:js",
    "debug:build:js": "mkdirp build/js && browserify test/forDebug/debug.js -o build/js/debug.js --debug --verbose -g deamdify",
    "debug:clean": "rimraf build",
    "debug:copy:css": "copyfiles -u 1 \"src/css/**/*\" build/ && copyfiles -u 1 node_modules/prismjs/themes/prism.css build/css/ && copyfiles -f node_modules/prismjs/themes/prism.css build/css/",
    "debug:copy:html": "copyfiles -u 1 \"src/html/*\" build/ && copyfiles -f test/forDebug/index.html build/",
    "debug:copy:images": "copyfiles -u 1 \"src/img/**/*\" build/",
    "debug:copy:jstree": "copyfiles -f \"node_modules/jstree/dist/themes/default/*\" build/css/jstree/themes/default && copyfiles -f src/css/jstree/themes/cwrc/cwrc.css build/css/jstree/themes/default",
    "debug:copy:xml": "copyfiles -u 3 \"src/js/schema/*/xml/*\" build/schema/",
    "debug:copyfiles": "npm run debug:copy:images && npm run debug:copy:css && npm run debug:copy:html && npm run debug:copy:xml && npm run debug:copy:jstree && npm run debug:tinymce:copyskin ",
    "debug:tinymce:copyskin": "copyfiles -u 2 \"node_modules/tinymce/skins/lightgray/**/*\" build/js/",
    "generate-coverage": "istanbul report --root coverage lcov",
    "precommit": "npm run test && npm run check-coverage",
    "report-coverage": "cat ./coverage/lcov.info | codecov",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "test": "npm run test:electron && npm run generate-coverage",
    "test:browser": "mkdirp coverage && cross-env NODE_ENV=test browserify -g deamdify test/test.js | browser-run  -p 2222 --static .  | node test/extract-coverage.js | faucet",
    "test:chrome": "mkdirp coverage && cross-env NODE_ENV=test browserify -g deamdify test/test.js | browser-run --static . -b chrome | node test/extract-coverage.js | faucet ",
    "test:electron": "mkdirp coverage && cross-env NODE_ENV=test browserify -g deamdify test/test.js | browser-run --static . | node test/extract-coverage.js | faucet ",
    "watch-test": "mkdirp build && cross-env NODE_ENV=test && watchify -g deamdify test/test.js -o build/test.js --debug --verbose"
  },
  "version": "0.0.0-development"
}
